// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc 3.12.4
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `foxglove/TextAnnotation.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:foxglove.TextAnnotation)
pub struct TextAnnotation {
    // message fields
    // @@protoc_insertion_point(field:foxglove.TextAnnotation.timestamp)
    pub timestamp: ::protobuf::MessageField<::protobuf::well_known_types::timestamp::Timestamp>,
    // @@protoc_insertion_point(field:foxglove.TextAnnotation.position)
    pub position: ::protobuf::MessageField<super::Point2::Point2>,
    // @@protoc_insertion_point(field:foxglove.TextAnnotation.text)
    pub text: ::std::string::String,
    // @@protoc_insertion_point(field:foxglove.TextAnnotation.font_size)
    pub font_size: f64,
    // @@protoc_insertion_point(field:foxglove.TextAnnotation.text_color)
    pub text_color: ::protobuf::MessageField<super::Color::Color>,
    // @@protoc_insertion_point(field:foxglove.TextAnnotation.background_color)
    pub background_color: ::protobuf::MessageField<super::Color::Color>,
    // special fields
    // @@protoc_insertion_point(special_field:foxglove.TextAnnotation.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a TextAnnotation {
    fn default() -> &'a TextAnnotation {
        <TextAnnotation as ::protobuf::Message>::default_instance()
    }
}

impl TextAnnotation {
    pub fn new() -> TextAnnotation {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::timestamp::Timestamp>(
            "timestamp",
            |m: &TextAnnotation| { &m.timestamp },
            |m: &mut TextAnnotation| { &mut m.timestamp },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::Point2::Point2>(
            "position",
            |m: &TextAnnotation| { &m.position },
            |m: &mut TextAnnotation| { &mut m.position },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "text",
            |m: &TextAnnotation| { &m.text },
            |m: &mut TextAnnotation| { &mut m.text },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "font_size",
            |m: &TextAnnotation| { &m.font_size },
            |m: &mut TextAnnotation| { &mut m.font_size },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::Color::Color>(
            "text_color",
            |m: &TextAnnotation| { &m.text_color },
            |m: &mut TextAnnotation| { &mut m.text_color },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::Color::Color>(
            "background_color",
            |m: &TextAnnotation| { &m.background_color },
            |m: &mut TextAnnotation| { &mut m.background_color },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<TextAnnotation>(
            "TextAnnotation",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for TextAnnotation {
    const NAME: &'static str = "TextAnnotation";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.timestamp)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.position)?;
                },
                26 => {
                    self.text = is.read_string()?;
                },
                33 => {
                    self.font_size = is.read_double()?;
                },
                42 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.text_color)?;
                },
                50 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.background_color)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.timestamp.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.position.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if !self.text.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.text);
        }
        if self.font_size != 0. {
            my_size += 1 + 8;
        }
        if let Some(v) = self.text_color.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.background_color.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.timestamp.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.position.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if !self.text.is_empty() {
            os.write_string(3, &self.text)?;
        }
        if self.font_size != 0. {
            os.write_double(4, self.font_size)?;
        }
        if let Some(v) = self.text_color.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        }
        if let Some(v) = self.background_color.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> TextAnnotation {
        TextAnnotation::new()
    }

    fn clear(&mut self) {
        self.timestamp.clear();
        self.position.clear();
        self.text.clear();
        self.font_size = 0.;
        self.text_color.clear();
        self.background_color.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static TextAnnotation {
        static instance: TextAnnotation = TextAnnotation {
            timestamp: ::protobuf::MessageField::none(),
            position: ::protobuf::MessageField::none(),
            text: ::std::string::String::new(),
            font_size: 0.,
            text_color: ::protobuf::MessageField::none(),
            background_color: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for TextAnnotation {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("TextAnnotation").unwrap()).clone()
    }
}

impl ::std::fmt::Display for TextAnnotation {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TextAnnotation {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1dfoxglove/TextAnnotation.proto\x12\x08foxglove\x1a\x14foxglove/Colo\
    r.proto\x1a\x15foxglove/Point2.proto\x1a\x1fgoogle/protobuf/timestamp.pr\
    oto\"\x95\x02\n\x0eTextAnnotation\x128\n\ttimestamp\x18\x01\x20\x01(\x0b\
    2\x1a.google.protobuf.TimestampR\ttimestamp\x12,\n\x08position\x18\x02\
    \x20\x01(\x0b2\x10.foxglove.Point2R\x08position\x12\x12\n\x04text\x18\
    \x03\x20\x01(\tR\x04text\x12\x1b\n\tfont_size\x18\x04\x20\x01(\x01R\x08f\
    ontSize\x12.\n\ntext_color\x18\x05\x20\x01(\x0b2\x0f.foxglove.ColorR\tte\
    xtColor\x12:\n\x10background_color\x18\x06\x20\x01(\x0b2\x0f.foxglove.Co\
    lorR\x0fbackgroundColorb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(3);
            deps.push(super::Color::file_descriptor().clone());
            deps.push(super::Point2::file_descriptor().clone());
            deps.push(::protobuf::well_known_types::timestamp::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(TextAnnotation::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
